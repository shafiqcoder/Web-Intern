Beginner JavaScript Course from wesbos.com
------------------------------------------

Install NodeJs

sudo apt install nodejs
node -v

Install NPM

sudo apt install npm
npm -v

###
Linux Commands

cd -change directory
ls - list items in directory
ls -l list with details
pwd - print working directory - if you wanna know where you are

commandlinepoweruser.com - command line course

cd .. -go upper level
node (to enter in REPL	-Read eval print loop)
node index.js(runs js in terminal)

###

JS editor - VS Code

More info wesbos.com/uses

###

use script tag before the closing tag of body, 
var cool=true; (variable declaration statement)
console.log(cool) (function call statement)
var and let variable can be updated.
const varivables cant be changed.
'use strict'; with this mode ,you cannot define variable without decalaration. its good practice.
var variable refer to as function scope variable.
let and const refer to as block scope variable.
Variable declaration tip: use const by default , use let if value needs to be changed. 
As a convention ,varibale name should start with small letter, unless they are class/prototype.
variable name can only be created with alphabets underscore _ and dollar sign $.
variable cases;
camel case	iAmCamelCase=true;
Upper camel case	IAmCamelCase=true;	Convention for classes.
snake case	this_is_snake_case=true;
-------
eslint.org	Find and fix problems in your JavaScript code, It gives feedback on your code.
prettier.io	An opinionated code formatter
---------
console.log is for debugging therefore not suitable to ship to the client.
variable created inside the function scope not available outside unless its return.
function parameters function hello(first,second), when calling function its argument hello(Shafiq,coder).
JS functions are values it self. they can be stored in a variable.
a function without name is anonymous fn.
function expression-store a function in a variable.
---------
JavaScript Hoisting:
Hoisting is JavaScript's default behavior of moving declarations to the top.
Hoisting is JavaScript's default behavior of moving all declarations to the top of the current scope (to the top of the current script or the current function).
JavaScript Declarations are Hoisted.(e.g. var y, var x, var hello,)
In JavaScript, a variable can be declared after it has been used.
In other words; a variable can be used before it has been declared.
Variables defined with var are hoisted to the top and can be initialized at any time.
Variables defined with let are also hoisted to the top of the block, but not initialized.
Meaning: Using a let variable before it is declared will result in a ReferenceError.
All functions are hoisted in JS except function defined with function expression.
-----
Arrow functions
arrow functions are anonymous functions and concise.
skinny arrow ->
fat arrow => 
dont need explicit return 
one liners.
if you have two parameters in arrow function you must have parenthesis. e.g. const add=(a,b=3)=>a+b; but in single parameter no need. e.g. const inchToCm=inches=>inches*2.54;
-----
curly brackets {} in js can be block of code or creation of object.
closure in action that is inner function can have access to the outer function variables/parameters as well as all the global variables.
-----
https://picsum.photos/200, The Lorem Ipsum for photos.
-----
Window: load event
The load event is fired when the whole page has loaded, including all dependent resources such as stylesheets and images. This is in contrast to DOMContentLoaded, which is fired as soon as the page DOM has been loaded, without waiting for resources to finish loading.
--
<!-- The <hr> element is most often displayed as a horizontal rule that is used to separate content (or define a change) in an HTML page. -->
--
Want to preserve log messages? go to settings in console and turn on preserve log option.
--
const sc = document.querySelector(".sc");// select class sc by .sc
--
buttons are to be used to take action inside page.
links are to be used to change page.
--
threejs.org
--
'this' is undefined inside normal function, but it is window object in global scope and inside an arrow function.
--
call back function - it is a function which runs after completion of an action. 
--
JS code runs without blocking main thread. it is done by call backs
--
Everything in JS happens inside an execution context.(think like a box or container)
It has two parts
Memory component/Variable Environment-> Everything is stored in key value pair.
Code Component/Thread of execution -> In which code is executed one line at a time.
--
JS is a synchronous single threaded language.
	single threaded means JS execute one line/ one command at time.
	synchronous means js code runs in a specific order.it goes to the next line once the 		execution of current line finished.
--
Execution context is created in two phases
	1.	Creation Phases/Memory Creation Phase:
		In this phase JS allocates the memory to all the variable and functions.
		e.g. 	var x=1
			here JS first stores the special value called undefined to variable x.
			in case of function ,it stores whole code.
	2.	Code Execution Phase:
		In this phase now the value 1 is assigned to x.
--
functions are the Heart of JS.They behave very differently in JS then any other langauge.
functions are like mini program, when ever a functon in invoked , all together new execution context is created. Now again it has two components.
--
"" it is falsy
" " it is truthy
"0" it is truthy
--
empty array is truthy but [].length is falsy because its length is zero.
--
{} is truthy but Object.keys({}).length is falsy
--
Type Coercion refers to the process of automatic or implicit conversion of values from one data type to another. This includes conversion from Number to String, String to Number, Boolean to Number etc. when different types of operators are applied to the values.
In case the behavior of the implicit conversion is not sure, the constructors of a data type can be used to convert any value to that datatype, like the Number(), String() or Boolean() constructor.
--
const for objects means you cannot create new object with same name but you can change its properties.
--
emmutable - not changeable value
--
delete object.property gives true or false.
--
for deep copy of objects we can use lodash library
--
if two objects have same properties, the property which comes first will be overwriten by second property.
--
If you pass an object into a function and you modify that object ,the external object will also be updated . It is not the case for booleans, numbers and strings.
--
 what does immutable mean? #
If an item is mutable, modifying the copy also modifies the original. If it’s immutable, modifying the copy does not affect the original.

It’s confusing because immutable sounds like the item can’t be changed. What it actually means, though, is that the original is not changed when the copy is.
--






