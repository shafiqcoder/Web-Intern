ReactJS used to create single page applications.
It is most useful due to components based programming. Its based on "Write once use everywhere" principle.
--
Install nodejs,npm,React Developer Tools(chrome extension),Thunder Client(VS code ext. alt to postman (to check API response)),VS code ES7 React/Redux/GraphQL/React-Native snippets(shortcut to commands),Bracket Pair Colorizer,Auto Rename Tag,Prettier - Code formatter,
--
sudo npm -g install create-react-app my-app (replace my-app with . to install in the same directory)(my-app ,app name should be url friendly with no capitals)
(create-react-app complete will be downloaded, )(if failed to create "npm cache clean --force")
to create new app"create-react-app textutils"
npx install create-react-app my-app (direct installation of react app)
npm start - to open app
npm run build - for production build
--
JSx fragment <> </> , usually react app.js returns single tag in a function
--
emmet extension- in setting add language key value(javascript: javascriptreact)
--
node modules folder can be re-created by npm install or npm i
--
using bootstrap in react app.
add closing tag. e.g. /
replace class with className,for with htmlFor, tabindex with tabIndex, 
--
DO NOT add credential information/files in Public folder of react app.
--
For Production Build - npm run build
--
default export can be imported with any name e.g. import apple from './module.js', but export variables with their same name in brackets {}
--
state mean the whole thing UI,logic, variables , everything.
--
React Hooks Theory

What are React Hooks?

1.Features of class based components in function based components.
2.It allows you to use state and other React features without writing a class.
3.Hooks are the functions which "Hook Into" React state and lifecycle features from function components.
Commonly used React Hooks
	useState
	
	The setState function is used to update the state. It accepts a new state value and 		enqueues a re-render of the component.
	
	useEffect
	The function passed to useEffect will run after the render is committed to the screen. 		Think of effects as an escape hatch from Reactâ€™s purely functional world into the 		imperative world.

	By default, effects run after every completed render, but you can choose to fire them 		only when certain values have changed.


	useContext
	Accepts a context object (the value returned from React.createContext) and returns the 		current context value for that context. The current context value is determined by the 		value prop of the nearest <MyContext.Provider> above the calling component in the tree.
	
	useRef
	


--------------------------------
What is React Node?

React nodes are basically equivalent to DOM nodes. To simplify, we can just talk about them as generic 'nodes.'

A node is the basic building block of a web page. All HTML elements (div, a, p) are nodes, as well as document, text, attributes...

You can create these nodes as separate entities, and then organize them into a tree (the DOM) in a parent-child hierarchy. document is the root, and then any nodes you add as children will be added to the page. W3Schools has a basic diagram here: https://www.w3schools.com/js/js_htmldom_navigation.asp

Part of what makes React fast is that is builds a virtual DOM, and then compares the actual DOM with the virtual DOM to replace only the nodes which have changed since the previous render. But conceptually, React nodes and DOM nodes are equivalent.

See this answer as well: What is a node in Javascript?

And the MDN docs for node:https://developer.mozilla.org/en-US/docs/Web/API/Node


According to the W3C HTML DOM standard, everything in an HTML document is a node:

The entire document is a document node
Every HTML element is an element node
The text inside HTML elements are text nodes
Every HTML attribute is an attribute node (deprecated)
All comments are comment nodes

-----











































































